{"version":3,"sources":["assets/images/github.png","store/actions.js","store/reducers/initialState.js","store/reducers/index.js","store/reducers/data.js","store/sagas.js","store/store.js","components/Contact/Contact.js","components/Home/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","getAuthTokenAction","type","getPopularMoviesAction","receivePopularMoviesAction","data","receiveSearchResultAction","receiveRandomMovieSearch","requestSessionId","receiveMovieById","receiveMovieVideos","receiveMoviePosters","getAccountDetails","receiveAccountDetails","receiveFavList","receiveWatchList","resetSearchResults","apiToken","searchResults","results","searchHasResults","isAuthenticated","movieDetails","movieVideos","moviePosters","accountDetails","combineReducers","state","initialState","popularMovies","latestMovieResultId","id","favoriteMovies","userFavList","userWatchList","getPopularMovies","getMovieById","getMovieVideos","getMoviePosters","getMovieSearch","getLatestMovieSearch","addToList","getFavList","getWatchList","requestApiData","apiKey","process","getAuthToken","fetch","then","response","json","location","window","request_token","catch","error","console","log","action","url","body","JSON","stringify","method","headers","success","session_id","localStorage","setItem","vakaren_session_id","parse","getItem","put","query","page","accountId","movieId","listType","responseJSON","favorited","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","reducer","composeWithDevTools","applyMiddleware","run","mySaga","Contact","className","href","alt","src","Github","withRouter","connect","dispatch","bindActionCreators","useEffect","search","includes","authorizedToken","params","substring","split","paramsObject","map","param","key","value","length","store","exact","path","Boolean","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ddbfd704.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.d22ee372.png\";","export const REQUEST_API_DATA = \"REQUEST_API_DATA\";\nexport const RECEIVE_API_DATA = \"RECEIVE_API_DATA\";\n\nexport const GET_AUTH_TOKEN = 'GET_AUTH_TOKEN';\nexport const RECEIVE_REQUEST_TOKEN = 'RECEIVE_REQUEST_TOKEN';\n\nexport const GET_POPULAR_MOVIES = 'GET_POPULAR_MOVIES';\nexport const RECEIVE_POPULAR_MOVIES = 'RECEIVE_POPULAR_MOVIES';\n\nexport const GET_SEARCH_RESULT = 'GET_SEARCH_RESULT';\nexport const RECEIVE_MOVIE_SEARCH = 'RECEIVE_MOVIE_SEARCH';\n\nexport const GET_LATEST_MOVIE_SEARCH = 'GET_LATEST_MOVIE_SEARCH';\nexport const RECEIVE_LATEST_MOVIE_SEARCH = 'RECEIVE_LATEST_MOVIE_SEARCH';\n\nexport const REQUEST_SESSION_ID = 'REQUEST_SESSION_ID';\nexport const RECEIVE_SESSION_ID = 'RECEIVE_SESSION_ID';\n\nexport const GET_MOVIE_BY_ID = 'GET_MOVIE_BY_ID';\nexport const RECEIVE_MOVIE_BY_ID = 'RECEIVE_MOVIE_BY_ID';\n\nexport const GET_MOVIE_VIDEOS = 'GET_MOVIE_VIDEOS';\nexport const RECEIVE_MOVIE_VIDEOS = 'RECEIVE_MOVIE_VIDEOS';\n\nexport const GET_MOVIE_POSTERS = 'GET_MOVIE_POSTERS';\nexport const RECEIVE_MOVIE_POSTERS = 'RECEIVE_MOVIE_POSTERS';\n\nexport const GET_ACCOUNT_DETAILS = 'GET_ACCOUNT_DETAILS';\nexport const RECEIVE_ACCOUNT_DETAILS = 'RECEIVE_ACCOUNT_DETAILS';\n\nexport const ADD_TO_LIST = 'ADD_TO_LIST';\nexport const ADD_TO_LIST_RESPONSE = 'ADD_TO_LIST_RESPONSE';\n\nexport const ADD_TO_WATCHLIST = 'ADD_TO_WATCHLIST';\nexport const ADD_TO_WATCHLIST_RESPONSE = 'ADD_TO_WATCHLIST_RESPONSE';\n\nexport const ADD_TO_FAVORITELIST = 'ADD_TO_FAVORITELIST';\nexport const ADD_TO_FAVORITELIST_RESPONSE = 'ADD_TO_FAVORITELIST_RESPONSE';\n\nexport const GET_FAV_LIST = 'GET_FAV_LIST';\nexport const RECEIVE_FAV_LIST = 'RECEIVE_FAV_LIST';\n\nexport const GET_WATCH_LIST = 'GET_WATCH_LIST';\nexport const RECEIVE_WATCH_LIST = 'RECEIVE_WATCH_LIST';\n\nexport const RESET_SEARCH_RESULTS = 'RESET_SEARCH_RESULTS'; \n\nexport const requestApiDataAction = () => ({ type: REQUEST_API_DATA });\nexport const receiveApiDataAction = data => ({ type: RECEIVE_API_DATA, data });\n\nexport const getAuthTokenAction = () => ({ type: GET_AUTH_TOKEN });\nexport const receiveRequestTokenAction = data => ({ type: RECEIVE_REQUEST_TOKEN, data });\n\nexport const getPopularMoviesAction = () => ({ type: GET_POPULAR_MOVIES });\nexport const receivePopularMoviesAction = data => ({ type: RECEIVE_POPULAR_MOVIES, data });\n\nexport const requestSearchResultAction = (query, page) => ({ type: GET_SEARCH_RESULT, query, page }); \nexport const receiveSearchResultAction = data => ({ type: RECEIVE_MOVIE_SEARCH, data }); \n\nexport const requestLatestMovieSearch = () => ({ type: GET_LATEST_MOVIE_SEARCH });\nexport const receiveRandomMovieSearch = data => ({ type: RECEIVE_LATEST_MOVIE_SEARCH, data});\n\nexport const requestSessionId = data => ({ type: REQUEST_SESSION_ID, data });\n\nexport const getMovieById = id => ({ type: GET_MOVIE_BY_ID, id });\nexport const receiveMovieById = data => ({ type: RECEIVE_MOVIE_BY_ID, data });\n\nexport const getMovieVideos = id => ({ type: GET_MOVIE_VIDEOS, id });\nexport const receiveMovieVideos = data => ({ type: RECEIVE_MOVIE_VIDEOS, data });\n\nexport const getMoviePosters = id => ({ type: GET_MOVIE_POSTERS, id });\nexport const receiveMoviePosters = data => ({ type: RECEIVE_MOVIE_POSTERS, data });\n\nexport const getAccountDetails = () => ({ type: GET_ACCOUNT_DETAILS});\nexport const receiveAccountDetails = data => ({ type: RECEIVE_ACCOUNT_DETAILS, data });\n\nexport const addToList = (movieId, accountId, listType) => ({ type: ADD_TO_LIST, movieId, accountId, listType });\nexport const addToListResponse = data => ({ type: ADD_TO_LIST_RESPONSE, data });\n\nexport const getFavList = accountId => ({ type: GET_FAV_LIST, accountId });\nexport const getWatchList = accountId => ({ type: GET_WATCH_LIST, accountId });\nexport const receiveFavList = data => ({ type: RECEIVE_FAV_LIST, data });\nexport const receiveWatchList = data => ({ type: RECEIVE_WATCH_LIST, data });\n\n\nexport const resetSearchResults = () => ({ type: RESET_SEARCH_RESULTS })\n\nexport const addedToFavorites = data => ({type: ADD_TO_LIST_RESPONSE, data})","export default {\n    apiToken: {},\n    searchResults: {\n        results: [],\n    },\n    searchHasResults: false,\n    isAuthenticated: false,\n    movieDetails: {},\n    movieVideos: {},\n    moviePosters: {},\n    accountDetails: {},\n};\n","import { combineReducers } from \"redux\";\n\nimport data from \"./data\";\n\nexport default combineReducers({\n  data\n});\n","import { \n  RECEIVE_API_DATA,\n  RECEIVE_REQUEST_TOKEN,\n  RECEIVE_POPULAR_MOVIES,\n  RECEIVE_MOVIE_SEARCH,\n  RECEIVE_LATEST_MOVIE_SEARCH,\n  REQUEST_SESSION_ID,\n  RECEIVE_MOVIE_BY_ID,\n  RECEIVE_MOVIE_VIDEOS,\n  RECEIVE_MOVIE_POSTERS,\n  RECEIVE_ACCOUNT_DETAILS,\n  RECEIVE_FAV_LIST,\n  RECEIVE_WATCH_LIST,\n  RESET_SEARCH_RESULTS,\n  ADD_TO_LIST_RESPONSE\n} from \"../actions\";\n\nimport initialState from './initialState';\n\nexport default (state = initialState, { type, data }) => {\n  switch (type) {\n    case RECEIVE_REQUEST_TOKEN:\n      return {\n        ...state,\n        apiToken: data\n      };\n    //to be added in the future\n    case RECEIVE_POPULAR_MOVIES: \n      return {\n        ...state,\n        popularMovies: data\n      };\n    case RECEIVE_MOVIE_SEARCH: \n      return {\n        ...state,\n        searchResults: data\n      };\n    case RECEIVE_LATEST_MOVIE_SEARCH: \n      return {\n        ...state,\n        latestMovieResultId: data.id\n      };\n    case REQUEST_SESSION_ID:\n      return {\n        ...state,\n        isAuthenticated: data ? true : false\n      };\n    case RECEIVE_MOVIE_BY_ID: \n      return {\n        ...state,\n        movieDetails: data\n      };\n    case ADD_TO_LIST_RESPONSE:\n      return {\n        ...state,\n        favoriteMovies: {\n          ...state.favoriteMovies,\n          data\n        }\n      }\n    case RECEIVE_API_DATA: \n      return {\n        ...state,\n        movieDetails: data\n      };\n    case RECEIVE_MOVIE_VIDEOS:\n      return {\n        ...state,\n        movieVideos: data\n      };\n    case RECEIVE_MOVIE_POSTERS:\n      return {\n        ...state,\n        moviePosters: data\n      };\n    case RECEIVE_ACCOUNT_DETAILS: \n      return {\n        ...state,\n        accountDetails: data\n      };\n    case RECEIVE_FAV_LIST: \n      return {\n        ...state,\n        userFavList: data\n      }\n    case RECEIVE_WATCH_LIST: \n      return {\n        ...state,\n        userWatchList: data\n      }  \n    case RESET_SEARCH_RESULTS:\n      return {\n        ...state,\n        searchResults: initialState.searchResults\n      }\n    default:\n      return state;\n  }\n};\n","import { put, takeEvery } from \"redux-saga/effects\";\n// import { call, put, takeEvery, takeLatest, take } from \"redux-saga/effects\";\n\n\nimport { \n  GET_AUTH_TOKEN, \n  GET_POPULAR_MOVIES, \n  GET_SEARCH_RESULT, \n  GET_LATEST_MOVIE_SEARCH,\n  REQUEST_SESSION_ID,\n  GET_MOVIE_BY_ID,\n  GET_MOVIE_VIDEOS,\n  GET_MOVIE_POSTERS,\n  GET_ACCOUNT_DETAILS,\n  ADD_TO_LIST,\n  GET_FAV_LIST,\n  GET_WATCH_LIST,\n  receiveSearchResultAction,  \n  receiveRandomMovieSearch, \n  receivePopularMoviesAction,\n  receiveMovieById,\n  receiveMovieVideos,\n  receiveMoviePosters,\n  receiveAccountDetails,\n  addToListResponse,\n  receiveWatchList,\n  receiveFavList,\n } from \"./actions\";\n\nconst apiKey = process.env.REACT_APP_API_KEY; \n\n//authentication\nexport const getAuthToken = () => {\n  fetch(`https://api.themoviedb.org/3/authentication/token/new?api_key=${apiKey}`)\n      .then(response => response.json())\n      .then(response => {\n          const location = window.location;\n          const { request_token } = response;\n          window.location = `https://www.themoviedb.org/authenticate/${request_token}?redirect_to=${location}`;\n      })\n      .catch(error => console.log(error));\n};\n\nexport const requestSessionId = (action) => {\n  // after the user allows the request_token, get the new session_id using that token\n  const url = `https://api.themoviedb.org/3/authentication/session/new?api_key=${apiKey}`;\n  const body = JSON.stringify({\n      \"request_token\": action.data\n  });\n\n\n  fetch(url, {\n      method: 'POST',\n      body: body,\n      headers: {\n          'Content-Type': 'application/json'\n      }\n  })\n      .then(response => response.json())\n      .then(response => {\n          const { success, session_id } = response;\n          if (success) {\n              localStorage.setItem('vakaren_session_id', JSON.stringify({ session_id }));\n          }\n        })\n      .catch(error => console.log(error));\n};\n\nexport function* getAccountDetails() {\n  const vakaren_session_id = JSON.parse(localStorage.getItem('vakaren_session_id'));\n  try {\n    const response = yield fetch(`https://api.themoviedb.org/3/account?api_key=${apiKey}&session_id=${vakaren_session_id.session_id}`)\n    const data = yield response.json();\n    yield put(receiveAccountDetails(data));\n  } catch (e) {\n      console.log(e);\n  }\n}\n\nexport function* getPopularMovies(action) {\n  try {\n    const response = yield fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`)\n    const data = yield response.json();\n    yield put(receivePopularMoviesAction(data));\n  } catch (e) {\n      console.log(e); // Just log it for now\n  }\n}\n\nexport function* getMovieById (action) {\n  try {    \n    const response = yield fetch(`https://api.themoviedb.org/3/movie/${action.id}?api_key=${apiKey}`);\n    const data = yield response.json();\n    yield put(receiveMovieById(data));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport function* getMovieVideos (action) {\n  try {\n    const response = yield fetch(`https://api.themoviedb.org/3/movie/${action.id}/videos?api_key=${apiKey}&language=en-US`);\n    const data = yield response.json();\n    yield put(receiveMovieVideos(data));\n  } catch(e) {\n    console.log(e);\n  }\n};\n\nexport function* getMoviePosters (action) {\n  try {\n    const response = yield fetch(`https://api.themoviedb.org/3/movie/${action.id}/images?api_key=${apiKey}&language=en-US&include_image_language=en,null`);\n    const data = yield response.json();\n    yield put(receiveMoviePosters(data));\n  } catch(e) {\n    console.log(e);\n  }\n}\n\nexport function* getMovieSearch(action) {\n  try {\n      const response = yield fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${action.query}&page=${action.page}&include_adult=false`);\n      const data = yield response.json();\n      yield put(receiveSearchResultAction(data));\n  } catch (e) {\n      console.log(e);\n  }\n}\n\n\nexport function* getLatestMovieSearch() {\n  try {\n    // do api call\n    const response = yield fetch(`https://api.themoviedb.org/3/movie/latest?api_key=${apiKey}&language=en-US`);\n    const data = yield response.json();\n    yield put(receiveRandomMovieSearch(data));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* addToList({accountId, movieId, listType, type}) {\n\n  try {\n    const vakaren_session_id = JSON.parse(localStorage.getItem('vakaren_session_id'));\n    const url = `https://api.themoviedb.org/3/account/${accountId}/${listType}?api_key=${apiKey}&session_id=${vakaren_session_id.session_id}`;\n\n    const body = JSON.stringify({\n        \"media_type\": \"movie\",\n        \"media_id\": movieId,\n        [listType]: true\n      });\n  \n      const response = yield fetch(url, {\n        method: 'POST',\n        body: body,\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n      });\n\n      const responseJSON = yield response.json();\n\n      const { success } = responseJSON;\n\n      if (success) {\n        yield put(addToListResponse(\n          {\n            movieId,\n            favorited: true\n          }\n        ));\n      } else {\n          // good to add messages for the user why it failed; according to the status_code that is returned\n          console.log('Action failed');\n      }\n  } catch(error){\n    console.log(error)\n  }\n}\n\nexport function* getFavList({accountId}) {\n  const vakaren_session_id = JSON.parse(localStorage.getItem('vakaren_session_id'));\n  try {\n    // do api call\n    const response = yield fetch(`https://api.themoviedb.org/3/account/${accountId}/favorite/movies?api_key=${apiKey}&language=en-US&session_id=${vakaren_session_id.session_id}&sort_by=created_at.asc&page=1`);\n    const data = yield response.json();\n    yield put(receiveFavList(data));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* getWatchList({accountId}) {\n  const vakaren_session_id = JSON.parse(localStorage.getItem('vakaren_session_id'));\n  try {\n    // do api call\n    const response = yield fetch(`https://api.themoviedb.org/3/account/${accountId}/watchlist/movies?api_key=${apiKey}&language=en-US&session_id=${vakaren_session_id.session_id}&sort_by=created_at.asc&page=1`);\n    const data = yield response.json();\n    yield put(receiveWatchList(data));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n\n\nexport default function* requestApiData() {\n  yield takeEvery( GET_AUTH_TOKEN, getAuthToken );\n  yield takeEvery( GET_POPULAR_MOVIES, getPopularMovies );\n  yield takeEvery( GET_SEARCH_RESULT, getMovieSearch );\n  yield takeEvery( GET_LATEST_MOVIE_SEARCH, getLatestMovieSearch );\n  yield takeEvery( REQUEST_SESSION_ID, requestSessionId);\n  yield takeEvery( GET_MOVIE_BY_ID, getMovieById );\n  yield takeEvery( GET_MOVIE_VIDEOS, getMovieVideos );\n  yield takeEvery( GET_MOVIE_POSTERS, getMoviePosters ); \n  yield takeEvery( GET_ACCOUNT_DETAILS, getAccountDetails );\n  yield takeEvery( ADD_TO_LIST, addToList );\n  yield takeEvery( GET_FAV_LIST, getFavList );\n  yield takeEvery( GET_WATCH_LIST, getWatchList );\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nimport reducer from \"./reducers\";\nimport mySaga from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n\n  sagaMiddleware.run(mySaga);\n","import React from 'react';\nimport Github from './../../assets/images/github.png';\nimport './Contact.scss';\n\nconst Contact = () => {\n    return <div className=\"contact\"><a href=\"https://www.github.com/gokhanipek\"><img alt=\"github\" className=\"contact-image\" src={Github} /></a></div>\n}\n\nexport default Contact;","import React, { useEffect } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom'\nimport { resetSearchResults, getAuthTokenAction, getPopularMoviesAction, requestSessionId, getAccountDetails } from \"../../store/actions\";\nimport './Home.scss';\nimport Contact from \"../Contact/Contact\";\n\nconst Home = ({getAuthTokenAction, location, searchResults, requestSessionId, resetSearchResults}) => {\n  useEffect(() => {\n    const isAuthenticated = location.search.includes('approved=true')\n    const {request_token} = isAuthenticated ? authorizedToken() : {};\n    requestSessionId(request_token);\n  }, [])\n\n  const isAuthenticated = JSON.parse(localStorage.getItem('vakaren_session_id'));\n\n  const authorizedToken = () => {\n    if(location.search === '') return null;\n    const params = location.search.substring(1).split('&');\n    const paramsObject = {};\n    \n    params.map(param => {\n      const [key, value] = param.split('=');\n      paramsObject[key] = value;\n    })\n\n    return paramsObject;\n  }\n\n\n  const onClickHandler = () => {\n    return isAuthenticated ? null : getAuthTokenAction();\n  }\n\n  const onLogoClickHandler = () => {\n    return resetSearchResults();\n  }\n\n\n  return (\n    <div className=\"container\">\n      <div className={`home-wrapper ${searchResults.length > 0 ? 'top' : 'bottom'}`}>\n          <Contact/>\n      </div>\n    </div>\n    )\n}\n\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ getAuthTokenAction, getPopularMoviesAction, requestSessionId, getAccountDetails, resetSearchResults }, dispatch);\n\nconst mapStateToProps = state => ({ \n    searchResults: state.data.searchResults.results || null \n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home));\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport store from \"../store/store\";\nimport Home from \"./Home/Home\";\n\nexport default () =>\n  <Provider store={store}>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  </Provider>;\n\n  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render( < App / > , document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}